// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// RequestHandlerInterface is an autogenerated mock type for the RequestHandlerInterface type
type RequestHandlerInterface struct {
	mock.Mock
}

type RequestHandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestHandlerInterface) EXPECT() *RequestHandlerInterface_Expecter {
	return &RequestHandlerInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c
func (_m *RequestHandlerInterface) Create(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RequestHandlerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerInterface_Expecter) Create(c interface{}) *RequestHandlerInterface_Create_Call {
	return &RequestHandlerInterface_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *RequestHandlerInterface_Create_Call) Run(run func(c *gin.Context)) *RequestHandlerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerInterface_Create_Call) Return() *RequestHandlerInterface_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerInterface_Create_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: c
func (_m *RequestHandlerInterface) Destroy(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerInterface_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type RequestHandlerInterface_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerInterface_Expecter) Destroy(c interface{}) *RequestHandlerInterface_Destroy_Call {
	return &RequestHandlerInterface_Destroy_Call{Call: _e.mock.On("Destroy", c)}
}

func (_c *RequestHandlerInterface_Destroy_Call) Run(run func(c *gin.Context)) *RequestHandlerInterface_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerInterface_Destroy_Call) Return() *RequestHandlerInterface_Destroy_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerInterface_Destroy_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerInterface_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: c
func (_m *RequestHandlerInterface) Show(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerInterface_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type RequestHandlerInterface_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerInterface_Expecter) Show(c interface{}) *RequestHandlerInterface_Show_Call {
	return &RequestHandlerInterface_Show_Call{Call: _e.mock.On("Show", c)}
}

func (_c *RequestHandlerInterface_Show_Call) Run(run func(c *gin.Context)) *RequestHandlerInterface_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerInterface_Show_Call) Return() *RequestHandlerInterface_Show_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerInterface_Show_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerInterface_Show_Call {
	_c.Call.Return(run)
	return _c
}

// ShowAll provides a mock function with given fields: c
func (_m *RequestHandlerInterface) ShowAll(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerInterface_ShowAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowAll'
type RequestHandlerInterface_ShowAll_Call struct {
	*mock.Call
}

// ShowAll is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerInterface_Expecter) ShowAll(c interface{}) *RequestHandlerInterface_ShowAll_Call {
	return &RequestHandlerInterface_ShowAll_Call{Call: _e.mock.On("ShowAll", c)}
}

func (_c *RequestHandlerInterface_ShowAll_Call) Run(run func(c *gin.Context)) *RequestHandlerInterface_ShowAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerInterface_ShowAll_Call) Return() *RequestHandlerInterface_ShowAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerInterface_ShowAll_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerInterface_ShowAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: c
func (_m *RequestHandlerInterface) Update(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RequestHandlerInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerInterface_Expecter) Update(c interface{}) *RequestHandlerInterface_Update_Call {
	return &RequestHandlerInterface_Update_Call{Call: _e.mock.On("Update", c)}
}

func (_c *RequestHandlerInterface_Update_Call) Run(run func(c *gin.Context)) *RequestHandlerInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerInterface_Update_Call) Return() *RequestHandlerInterface_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerInterface_Update_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRequestHandlerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestHandlerInterface creates a new instance of RequestHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestHandlerInterface(t mockConstructorTestingTNewRequestHandlerInterface) *RequestHandlerInterface {
	mock := &RequestHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
