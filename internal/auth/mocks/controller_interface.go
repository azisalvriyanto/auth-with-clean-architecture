// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	auth "auth-with-clean-architecture/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// ControllerInterface is an autogenerated mock type for the ControllerInterface type
type ControllerInterface struct {
	mock.Mock
}

type ControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ControllerInterface) EXPECT() *ControllerInterface_Expecter {
	return &ControllerInterface_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: body
func (_m *ControllerInterface) Login(body *auth.AuthRequest) (*auth.ProfileItemResponse, error) {
	ret := _m.Called(body)

	var r0 *auth.ProfileItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*auth.AuthRequest) (*auth.ProfileItemResponse, error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*auth.AuthRequest) *auth.ProfileItemResponse); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ProfileItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*auth.AuthRequest) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ControllerInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type ControllerInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - body *auth.AuthRequest
func (_e *ControllerInterface_Expecter) Login(body interface{}) *ControllerInterface_Login_Call {
	return &ControllerInterface_Login_Call{Call: _e.mock.On("Login", body)}
}

func (_c *ControllerInterface_Login_Call) Run(run func(body *auth.AuthRequest)) *ControllerInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auth.AuthRequest))
	})
	return _c
}

func (_c *ControllerInterface_Login_Call) Return(_a0 *auth.ProfileItemResponse, _a1 error) *ControllerInterface_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ControllerInterface_Login_Call) RunAndReturn(run func(*auth.AuthRequest) (*auth.ProfileItemResponse, error)) *ControllerInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ShowProfile provides a mock function with given fields: tokenSigned
func (_m *ControllerInterface) ShowProfile(tokenSigned string) (*auth.ProfileItem, error) {
	ret := _m.Called(tokenSigned)

	var r0 *auth.ProfileItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.ProfileItem, error)); ok {
		return rf(tokenSigned)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.ProfileItem); ok {
		r0 = rf(tokenSigned)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ProfileItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenSigned)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ControllerInterface_ShowProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowProfile'
type ControllerInterface_ShowProfile_Call struct {
	*mock.Call
}

// ShowProfile is a helper method to define mock.On call
//   - tokenSigned string
func (_e *ControllerInterface_Expecter) ShowProfile(tokenSigned interface{}) *ControllerInterface_ShowProfile_Call {
	return &ControllerInterface_ShowProfile_Call{Call: _e.mock.On("ShowProfile", tokenSigned)}
}

func (_c *ControllerInterface_ShowProfile_Call) Run(run func(tokenSigned string)) *ControllerInterface_ShowProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ControllerInterface_ShowProfile_Call) Return(_a0 *auth.ProfileItem, _a1 error) *ControllerInterface_ShowProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ControllerInterface_ShowProfile_Call) RunAndReturn(run func(string) (*auth.ProfileItem, error)) *ControllerInterface_ShowProfile_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: tokenSigned
func (_m *ControllerInterface) VerifyToken(tokenSigned string) (*auth.JWTClaim, error) {
	ret := _m.Called(tokenSigned)

	var r0 *auth.JWTClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.JWTClaim, error)); ok {
		return rf(tokenSigned)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.JWTClaim); ok {
		r0 = rf(tokenSigned)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.JWTClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenSigned)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ControllerInterface_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type ControllerInterface_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - tokenSigned string
func (_e *ControllerInterface_Expecter) VerifyToken(tokenSigned interface{}) *ControllerInterface_VerifyToken_Call {
	return &ControllerInterface_VerifyToken_Call{Call: _e.mock.On("VerifyToken", tokenSigned)}
}

func (_c *ControllerInterface_VerifyToken_Call) Run(run func(tokenSigned string)) *ControllerInterface_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ControllerInterface_VerifyToken_Call) Return(_a0 *auth.JWTClaim, _a1 error) *ControllerInterface_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ControllerInterface_VerifyToken_Call) RunAndReturn(run func(string) (*auth.JWTClaim, error)) *ControllerInterface_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewControllerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewControllerInterface creates a new instance of ControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewControllerInterface(t mockConstructorTestingTNewControllerInterface) *ControllerInterface {
	mock := &ControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
